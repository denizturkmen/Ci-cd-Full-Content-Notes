stages:
  - SonarqubeCheck
  - Build
  - PushNewTag
  - Deployment
  - HealtyRollback

variables:
  IMAGE_ID: $CI_COMMIT_SHORT_SHA-$CI_PIPELINE_IID
  
Sonarqube Check:
  stage: SonarqubeCheck
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  tags:
    - devops-shell-1
  only:
    - master
    - development
    - uat
    - staging
    - production


Build for Dockerfile:
  stage: Build
  before_script:
    - docker login -u $username -p $password
    - echo $CI_PIPELINE_IID
    - echo $IMAGE_ID
  tags:
    - devops-shell-1
  script:
    - docker image build --tag denizturkmen/python:$IMAGE_ID --tag denizturkmen/python:latest .
    - docker push denizturkmen/python:$IMAGE_ID
    - docker push denizturkmen/python:latest

Push NewTag&NewImage for Kustomization:
  stage: PushNewTag
  tags:
    - devops-shell-1
  script: |
      echo "This is the development branch.";
      echo "New $IMAGE_ID image customization yaml newtag is being pushed..... "
      git clone https://gitlab_username:$GITLAB_TOKEN@gitlab.devops-deniz.net/gitops-deployment/gitops.git
      git checkout master
      git pull origin master 
      cd gitops/PythonEx/kustomize/overlays/development
      ls -ltr
      cat kustomization.yaml
      sed -i "s|^\(\s*newTag:\s*\).*|\1${IMAGE_ID}|g" kustomization.yaml
      cat kustomization.yaml
      echo " "
      git add kustomization.yaml
      git commit -m "Update image tag to ${IMAGE_ID}"
      git push --force origin master
      cd -
      pwd
      ls -ltr

      echo "This is the uat branch.";
      echo "New $IMAGE_ID image customization yaml newtag is being pushed..... "
      git checkout master
      git pull origin master 
      cd gitops/PythonEx/kustomize/overlays/uat
      ls -ltr
      cat kustomization.yaml
      sed -i "s|^\(\s*newTag:\s*\).*|\1${IMAGE_ID}|g" kustomization.yaml
      cat kustomization.yaml
      echo " "
      git add kustomization.yaml
      git commit -m "Update image tag to ${IMAGE_ID}"
      git push --force origin master
      cd - 

      echo "This is the staging branch.";
      echo "New $IMAGE_ID image customization yaml newtag is being pushed..... "
      git checkout master
      git pull origin master 
      cd gitops/PythonEx/kustomize/overlays/staging
      ls -ltr
      cat kustomization.yaml
      sed -i "s|^\(\s*newTag:\s*\).*|\1${IMAGE_ID}|g" kustomization.yaml
      cat kustomization.yaml
      echo " "
      git add kustomization.yaml
      git commit -m "Update image tag to ${IMAGE_ID}"
      git push --force origin master
      cd -   
      
      echo "This is the production branch.";
      echo "New $IMAGE_ID image customization yaml newtag is being pushed..... "
      git checkout master
      git pull origin master 
      cd gitops/PythonEx/kustomize/overlays/production
      ls -ltr
      cat kustomization.yaml
      sed -i "s|^\(\s*newTag:\s*\).*|\1${IMAGE_ID}|g" kustomization.yaml
      cat kustomization.yaml
      echo " "
      git add kustomization.yaml
      git commit -m "Update image tag to ${IMAGE_ID}"
      git push --force origin master
      cd - 

Deployment for Development Envrionment:
  stage: Deployment
  tags:
    - devops-shell-1
  script:
    - echo "Argocd Deployment is starting for Development Environment"
    - argocd login 192.168.1.7:31036 --username admin --password 21195831 --insecure
    - argocd app get argocd/gitops-arch-development-2 --hard-refresh
    - sleep 5
    - argocd app sync --grpc-web argocd/gitops-arch-development-2
  when: manual

HealtyCheck and Rollback for Development Envrionment:
  stage: HealtyRollback
  tags:
    - devops-shell-1
  needs:
    - Deployment for Development Envrionment
  script: | 
      argocd login 192.168.1.7:31036 --username admin --password 21195831 --insecure
      sleep 60
      
      echo "Checking health status of the ArgoCD application..."
           syncOutput=$(argocd app get argocd/gitops-arch-development-2 --grpc-web --output json | 
      jq -r '.status.resources[] | select(.kind=="Deployment") | .health.status')
      
      echo $syncOutput
      
      if [[ "$syncOutput" != "Healthy" ]]; then
        argocd app get --grpc-web argocd/gitops-arch-development-2
        argocd app rollback argocd/gitops-arch-development-2 
        sleep 5
        echo "Sync failed. Initiating rollback of last revision..."
        exit 1  # Force rollback stage if validation fails
     
      else
        echo "Sync was successful. New release is successful."
      fi
 

Deployment for Uat Envrionment:
  stage: Deployment
  tags:
    - devops-shell-1
  script:
    - echo "Argocd Deployment is starting for uat Environment"
    - argocd login 192.168.1.7:31036 --username admin --password 21195831 --insecure
    - argocd app get argocd/gitops-arch-uat-2 --hard-refresh
    - sleep 5
    - argocd app sync --grpc-web argocd/gitops-arch-uat-2
  when: manual

HealtyCheck and Rollback for Uat Envrionment:
  stage: HealtyRollback
  tags:
    - devops-shell-1
  needs:
    - Deployment for Uat Envrionment
  script: | 
      argocd login 192.168.1.7:31036 --username admin --password 21195831 --insecure
      sleep 60
      
      echo "Checking health status of the ArgoCD application..."
           syncOutput=$(argocd app get argocd/gitops-arch-uat-2 --grpc-web --output json | 
      jq -r '.status.resources[] | select(.kind=="Deployment") | .health.status')
      
      echo $syncOutput
      
      if [[ "$syncOutput" != "Healthy" ]]; then
        argocd app get --grpc-web argocd/gitops-arch-uat-2
        argocd app rollback argocd/gitops-arch-uat-2 
        sleep 5
        echo "Sync failed. Initiating rollback of last revision..."
        exit 1  # Force rollback stage if validation fails
     
      else
        echo "Sync was successful. New release is successful."
      fi

Deployment for Staging Envrionment:
  stage: Deployment
  tags:
    - devops-shell-1
  script:
    - echo "Argocd Deployment is starting for staging Environment"
    - argocd login 192.168.1.7:31036 --username admin --password 21195831 --insecure
    - argocd app get argocd/gitops-arch-staging-2 --hard-refresh
    - sleep 5
    - argocd app sync --grpc-web argocd/gitops-arch-staging-2
  when: manual

HealtyCheck and Rollback for Staging Envrionment:
  stage: HealtyRollback
  tags:
    - devops-shell-1
  needs:
    - Deployment for Staging Envrionment
  script: | 
      argocd login 192.168.1.7:31036 --username admin --password 21195831 --insecure
      sleep 60
      
      echo "Checking health status of the ArgoCD application..."
           syncOutput=$(argocd app get argocd/gitops-arch-staging-2 --grpc-web --output json | 
      jq -r '.status.resources[] | select(.kind=="Deployment") | .health.status')
      
      echo $syncOutput
      
      if [[ "$syncOutput" != "Healthy" ]]; then
        argocd app get --grpc-web argocd/gitops-arch-staging-2
        argocd app rollback argocd/gitops-arch-staging-2 
        sleep 5
        echo "Sync failed. Initiating rollback of last revision..."
        exit 1  # Force rollback stage if validation fails
     
      else
        echo "Sync was successful. New release is successful."
      fi

Deployment for Production Envrionment:
  stage: Deployment
  tags:
    - devops-shell-1
  script:
    - echo "Argocd Deployment is starting for production Environment"
    - argocd login 192.168.1.7:31036 --username admin --password 21195831 --insecure
    - argocd app get argocd/gitops-arch-production-2 --hard-refresh
    - sleep 5
    - argocd app sync --grpc-web argocd/gitops-arch-production-1
  when: manual

HealtyCheck and Rollback for Production Envrionment:
  stage: HealtyRollback
  tags:
    - devops-shell-1
  needs:
    - Deployment for Production Envrionment
  script: | 
      argocd login 192.168.1.7:31036 --username admin --password 21195831 --insecure
      sleep 60
      
      echo "Checking health status of the ArgoCD application..."
           syncOutput=$(argocd app get argocd/gitops-arch-production-2 --grpc-web --output json | 
      jq -r '.status.resources[] | select(.kind=="Deployment") | .health.status')
      
      echo $syncOutput
      
      if [[ "$syncOutput" != "Healthy" ]]; then
        argocd app get --grpc-web argocd/gitops-arch-production-2
        argocd app rollback argocd/gitops-arch-production-2 
        sleep 5
        echo "Sync failed. Initiating rollback of last revision..."
        exit 1  # Force rollback stage if validation fails
     
      else
        echo "Sync was successful. New release is successful."
      fi